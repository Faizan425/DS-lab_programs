Write a C program to create a graph and find a minimum spanning tree
using prims algorithm.
Algorithm:
CODE:
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;limits.h&gt;
#include &lt;stdbool.h&gt;

#define V 5

CS23231 – Data Structures

struct Edge {
int src, dest, weight;
};

struct Graph {
int V, E;
struct Edge* edge;
};

struct Graph* createGraph(int V, int E) {
struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
graph-&gt;V = V;
graph-&gt;E = E;
graph-&gt;edge = (struct Edge*) malloc(graph-&gt;E * sizeof(struct Edge));
return graph;
}

int minKey(int key[], bool mstSet[]) {
int min = INT_MAX, min_index;
for (int v = 0; v &lt; V; v++)
if (mstSet[v] == false &amp;&amp; key[v] &lt; min)
min = key[v], min_index = v;
return min_index;
}

void printMST(int parent[], struct Graph* graph) {
printf(&quot;Edge \tWeight\n&quot;);
for (int i = 1; i &lt; graph-&gt;V; i++)
printf(&quot;%d - %d \t%d \n&quot;, parent[i], i, graph-&gt;edge[i].weight);
}

void primMST(struct Graph* graph) {

CS23231 – Data Structures

int parent[V];
int key[V];
bool mstSet[V];

for (int i = 0; i &lt; V; i++)
key[i] = INT_MAX, mstSet[i] = false;

key[0] = 0;
parent[0] = -1;

for (int count = 0; count &lt; V - 1; count++) {
int u = minKey(key, mstSet);
mstSet[u] = true;
for (int v = 0; v &lt; V; v++)
if (graph-&gt;edge[u].weight &amp;&amp; mstSet[v] == false &amp;&amp; graph-&gt;edge[u].weight &lt; key[v])
parent[v] = u, key[v] = graph-&gt;edge[u].weight;
}

printMST(parent, graph);
}

int main() {
int V = 5;
int E = 7;
struct Graph* graph = createGraph(V, E);

graph-&gt;edge[0].src = 0; graph-&gt;edge[0].dest = 1; graph-&gt;edge[0].weight = 2;
graph-&gt;edge[1].src = 0; graph-&gt;edge[1].dest = 3; graph-&gt;edge[1].weight = 6;
graph-&gt;edge[2].src = 1; graph-&gt;edge[2].dest = 2; graph-&gt;edge[2].weight = 3;
graph-&gt;edge[3].src = 1; graph-&gt;edge[3].dest = 3; graph-&gt;edge[3].weight = 8;
graph-&gt;edge[4].src = 1; graph-&gt;edge[4].dest = 4; graph-&gt;edge[4].weight = 5;
graph-&gt;edge[5].src = 2; graph-&gt;edge[5].dest = 4; graph-&gt;edge[5].weight = 7;
graph-&gt;edge[6].src = 3; graph-&gt;edge[6].dest = 4; graph-&gt;edge[6].weight = 9;

CS23231 – Data Structures

primMST(graph);

return 0;
}
