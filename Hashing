Write a C program to create a hash table and perform collision
resolution using the following techniques.
(i) Open addressing
(ii) Closed Addressing
(iii) Rehashing

Algorithm:
CODE:
i)Open Addressing:
#include &lt;stdio.h&gt;

CS23231 – Data Structures

#include &lt;stdlib.h&gt;
#include &lt;stdbool.h&gt;

#define SIZE 10

struct HashNode {
int key;
int value;
bool occupied;
};

struct HashNode* createHashNode(int key, int value) {
struct HashNode* newNode = (struct HashNode*)malloc(sizeof(struct HashNode));
newNode-&gt;key = key;
newNode-&gt;value = value;
newNode-&gt;occupied = true;
return newNode;
}

struct HashNode** createHashTable() {
struct HashNode** table = (struct HashNode**)malloc(SIZE * sizeof(struct HashNode*));
for (int i = 0; i &lt; SIZE; i++) {
table[i] = NULL;
}
return table;
}

int hashCode(int key) {
return key % SIZE;
}

void insertOpenAddressing(struct HashNode** table, int key, int value) {
int index = hashCode(key);

CS23231 – Data Structures

while (table[index] != NULL &amp;&amp; table[index]-&gt;occupied) {
index = (index + 1) % SIZE;
}
table[index] = createHashNode(key, value);
}

void displayHashTable(struct HashNode** table) {
printf(&quot;Hash Table:\n&quot;);
for (int i = 0; i &lt; SIZE; i++) {
if (table[i] != NULL &amp;&amp; table[i]-&gt;occupied) {
printf(&quot;Index %d: Key = %d, Value = %d\n&quot;, i, table[i]-&gt;key, table[i]-&gt;value);
} else {
printf(&quot;Index %d: Empty\n&quot;, i);
}
}
}

int main() {
struct HashNode** hashTable = createHashTable();

insertOpenAddressing(hashTable, 5, 10);
insertOpenAddressing(hashTable, 15, 20);
insertOpenAddressing(hashTable, 25, 30);
insertOpenAddressing(hashTable, 35, 40);
insertOpenAddressing(hashTable, 45, 50);
insertOpenAddressing(hashTable, 55, 60);
insertOpenAddressing(hashTable, 65, 70);
insertOpenAddressing(hashTable, 75, 80);
insertOpenAddressing(hashTable, 85, 90);
insertOpenAddressing(hashTable, 95, 100);

displayHashTable(hashTable);

CS23231 – Data Structures

return 0;
}

2. Closed Addressing:

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define SIZE 10

struct HashNode {
int key;
int value;
struct HashNode* next;
};

struct HashNode* createHashNode(int key, int value) {
struct HashNode* newNode = (struct HashNode*)malloc(sizeof(struct HashNode));
newNode-&gt;key = key;
newNode-&gt;value = value;
newNode-&gt;next = NULL;
return newNode;
}

struct HashNode** createHashTable() {
struct HashNode** table = (struct HashNode**)malloc(SIZE * sizeof(struct HashNode*));
for (int i = 0; i &lt; SIZE; i++) {
table[i] = NULL;
}
return table;
}

int hashCode(int key) {

CS23231 – Data Structures

return key % SIZE;
}

void insertClosedAddressing(struct HashNode** table, int key, int value) {
int index = hashCode(key);
if (table[index] == NULL) {
table[index] = createHashNode(key, value);
} else {
struct HashNode* newNode = createHashNode(key, value);
newNode-&gt;next = table[index];
table[index] = newNode;
}
}

void displayHashTable(struct HashNode** table) {
printf(&quot;Hash Table:\n&quot;);
for (int i = 0; i &lt; SIZE; i++) {
struct HashNode* current = table[i];
printf(&quot;Index %d: &quot;, i);
while (current != NULL) {
printf(&quot;Key = %d, Value = %d -&gt; &quot;, current-&gt;key, current-&gt;value);
current = current-&gt;next;
}
printf(&quot;NULL\n&quot;);
}
}

int main() {
struct HashNode** hashTable = createHashTable();

insertClosedAddressing(hashTable, 5, 10);
insertClosedAddressing(hashTable, 15, 20);
insertClosedAddressing(hashTable, 25, 30);

CS23231 – Data Structures

insertClosedAddressing(hashTable, 35, 40);
insertClosedAddressing(hashTable, 45, 50);
insertClosedAddressing(hashTable, 55, 60);
insertClosedAddressing(hashTable, 65, 70);
insertClosedAddressing(hashTable, 75, 80);
insertClosedAddressing(hashTable, 85, 90);
insertClosedAddressing(hashTable, 95, 100);

displayHashTable(hashTable);

return 0;
}

3. Rehashing:

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdbool.h&gt;

#define SIZE 10
#define LOAD_FACTOR_THRESHOLD 0.7

struct HashNode {
int key;
int value;
bool occupied;
};

struct HashNode* createHashNode(int key, int value) {
struct HashNode* newNode = (struct HashNode*)malloc(sizeof(struct HashNode));
newNode-&gt;key = key;
newNode-&gt;value = value;
newNode-&gt;occupied = true;

CS23231 – Data Structures

return newNode;
}

struct HashNode** createHashTable(int size) {
struct HashNode** table = (struct HashNode**)malloc(size * sizeof(struct HashNode*));
for (int i = 0; i &lt; size; i++) {
table[i] = NULL;
}
return table;
}

int hashCode(int key, int size) {
return key % size;
}

void insertOpenAddressing(struct HashNode** table, int key
, int value, int size) {
int index = hashCode(key, size);
while (table[index] != NULL &amp;&amp; table[index]-&gt;occupied) {
index = (index + 1) % size;
}
table[index] = createHashNode(key, value);
}

void displayHashTable(struct HashNode** table, int size) {
printf(&quot;Hash Table:\n&quot;);
for (int i = 0; i &lt; size; i++) {
if (table[i] != NULL &amp;&amp; table[i]-&gt;occupied) {
printf(&quot;Index %d: Key = %d, Value = %d\n&quot;, i, table[i]-&gt;key, table[i]-&gt;value);
} else {
printf(&quot;Index %d: Empty\n&quot;, i);
}
}

CS23231 – Data Structures

}

double getLoadFactor(int count, int size) {
return (double)count / size;
}

void rehash(struct HashNode** oldTable, int oldSize, struct HashNode** newTable, int
newSize) {
for (int i = 0; i &lt; oldSize; i++) {
if (oldTable[i] != NULL &amp;&amp; oldTable[i]-&gt;occupied) {
int index = oldTable[i]-&gt;key % newSize;
while (newTable[index] != NULL &amp;&amp; newTable[index]-&gt;occupied) {
index = (index + 1) % newSize;
}
newTable[index] = oldTable[i];
}
}
free(oldTable);
}

int main() {
int initialSize = SIZE;
struct HashNode** hashTable = createHashTable(initialSize);
int count = 0;

insertOpenAddressing(hashTable, 5, 10, initialSize);
insertOpenAddressing(hashTable, 15, 20, initialSize);
insertOpenAddressing(hashTable, 25, 30, initialSize);
insertOpenAddressing(hashTable, 35, 40, initialSize);
insertOpenAddressing(hashTable, 45, 50, initialSize);
insertOpenAddressing(hashTable, 55, 60, initialSize);
insertOpenAddressing(hashTable, 65, 70, initialSize);
insertOpenAddressing(hashTable, 75, 80, initialSize);
insertOpenAddressing(hashTable, 85, 90, initialSize);

CS23231 – Data Structures

insertOpenAddressing(hashTable, 95, 100, initialSize);
count = 10;

double loadFactor = getLoadFactor(count, initialSize);
if (loadFactor &gt; LOAD_FACTOR_THRESHOLD) {
int newSize = initialSize * 2; // Double the size
struct HashNode** newTable = createHashTable(newSize);
rehash(hashTable, initialSize, newTable, newSize);
hashTable = newTable;
initialSize = newSize;
}

displayHashTable(hashTable, initialSize);

return 0;
}
