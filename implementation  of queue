Write a C program to implement a Queue using Array and linked List
implementation and execute the following operation on stack.
(i) Enqueue
(ii) Dequeue
(iii) Display the elements in a Queue
Algorithm:
CODE:-
//Queue linked list
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
struct Queue
{ int ele;
struct Queue *next;};
typedef struct Queue q;
q *f=NULL;
q *r=NULL;

void enqueue(int x)
{ q *newnode=malloc(sizeof(q));
newnode-&gt;ele=x;
if(f==NULL &amp;&amp; r==NULL)
{ f=r=newnode;
newnode-&gt;next=NULL;
return;
}
r-&gt;next=newnode;
r=newnode;

CS23231 – Data Structures

newnode-&gt;next=NULL;}
//f=newnode;}

void dequeue()
{ if(f==NULL &amp;&amp; r==NULL)
{ printf(&quot;UNDERFLOW\n&quot;);
return;}
if(f==r)
{ printf(&quot;THE DELETED ELE IS %d\n&quot;,f-&gt;ele);
f=r=NULL;
return;}
q *temp=f;
printf(&quot;DELETED ELEMENT IS %d\n&quot;,temp-&gt;ele);
f=f-&gt;next;
free(temp);
}

void display()
{ q *temp=f;
while(temp!=NULL)
{ printf(&quot;%d &quot;,temp-&gt;ele);
temp=temp-&gt;next;
}
printf(&quot;\n&quot;);
}

int main()
{
int ch;
printf(&quot;1 TO ENQUEUE\n2 TO DEQUEUE\n3 TO DISPLAY\n&quot;);
do
{ printf(&quot;ENTER YOUR CHOICE &quot;);
scanf(&quot;%d&quot;,&amp;ch);

CS23231 – Data Structures

switch(ch)
{ case 1:
int x;
printf(&quot;ELEMENT TO BE ADDED&quot;);
scanf(&quot;%d&quot;,&amp;x);
enqueue(x);
break;
case 2:
dequeue();
break;

case 3:
display();
break;
default:
break;
} } while(ch&lt;=3);

printf(&quot;THANK YOU&quot;);
}
//QUEUE USING ARRAY IMPLEMENTATION
//queue array
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define SIZE 100

int q[SIZE];
int f=-1,r=-1;

void enqueue(int x)
{ if(f==-1 &amp;&amp; r==-1)
{ f++;
r++;

CS23231 – Data Structures

q[f]=x;
return;
}
if(r==SIZE-1)
{ printf(&quot;OVERFLOW\n&quot;);
return;}
r++;
q[r]=x;
}

void dequeue()
{ if(f==-1 &amp;&amp; r==-1)
{ printf(&quot;UNDERFLOW\n&quot;);
return;}
if(f==r)
{ printf(&quot;THE DELETED ELE %d\n&quot;,q[f]);
f=r=-1;
return;}
printf(&quot;The deleted element is %d\n&quot;,q[f]);
f++;
}

void display()
{ for(int i=f;i&lt;=r;i++)
{ printf(&quot;%d &quot;,q[i]);
}
printf(&quot;\n&quot;);}

int main()
{
int ch;
printf(&quot;1 TO ENQUEUE\n2 TO DEQUEUE\n3 TO DISPLAY\n&quot;);

CS23231 – Data Structures

do
{ printf(&quot;ENTER YOUR CHOICE &quot;);
scanf(&quot;%d&quot;,&amp;ch);
switch(ch)
{ case 1:
int x;
printf(&quot;ELEMENT TO BE ADDED&quot;);
scanf(&quot;%d&quot;,&amp;x);
enqueue(x);
break;
case 2:
dequeue();
break;

case 3:
display();
break;
default:
break;
} } while(ch&lt;=3);

printf(&quot;THANK YOU&quot;);
}
OUTPUT:-
1 TO ENQUEUE
2 TO DEQUEUE
3 TO DISPLAY
ENTER YOUR CHOICE 1
ELEMENT TO BE ADDED20
ENTER YOUR CHOICE 1
ELEMENT TO BE ADDED30
ENTER YOUR CHOICE 1
ELEMENT TO BE ADDED40

CS23231 – Data Structures

ENTER YOUR CHOICE 3
20 30 40
ENTER YOUR CHOICE 2
DELETED ELEMENT IS 20
ENTER YOUR CHOICE 3
30 40
ENTER YOUR CHOICE 4
THANK YOU
